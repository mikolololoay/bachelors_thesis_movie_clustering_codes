myPaths <- .libPaths()
myPaths <- c(myPaths, 'D:/licencjat/bachelors_thesis_movie_clustering_codes/R_directories')
.libPaths(myPaths)
myPaths <- .libPaths()   # get the paths
myPaths <- c(myPaths[3], myPaths[2], myPaths[1])  # switch them
.libPaths(myPaths)  # reassign them
.libPaths()
library(tidyverse)
library(TSclust)
library(gplots)
library(dtwclust)
library(gridExtra)
library(ggdendro)
library(tidyverse)
library(TSclust)
library(gplots)
library(dtwclust)
library(gridExtra)
library(ggdendro)
boxoffice <- read.csv(file = 'preprocessed_data/first_month_boxoffice_gross_inflation_adjusted.csv', row.names=1, check.names=FALSE)
boxoffice <- read.csv(file = 'preprocessed_data/first_month_boxoffice_gross_inflation_adjusted.csv', row.names=1, check.names=FALSE)
boxoffice <- read.csv(file = 'preprocessed_data/first_month_boxoffice_gross_inflation_adjusted.csv', row.names=1, check.names=FALSE)
boxoffice <- read.csv(file = 'preprocessed_data/first_month_boxoffice_gross_inflation_adjusted.csv', row.names=1, check.names=FALSE)
boxoffice <- read.csv(file ="preprocessed_data/first_month_boxoffice_gross_inflation_adjusted.csv", row.names=1, check.names=FALSE)
library(tidyverse)
library(TSclust)
library(gplots)
library(dtwclust)
library(gridExtra)
library(ggdendro)
setwd("D:/licencjat/bachelors_thesis_movie_clustering_codes/notebooks")
boxoffice <- read.csv(file ="../preprocessed_data/first_month_boxoffice_gross_inflation_adjusted.csv", row.names=1, check.names=FALSE)
boxoffice
ts.plot(boxoffice["Aladdin"])
sample_boxoffice <- select(boxoffice, c(15:30))
sample_boxoffice <- select(boxoffice, c(15:30))
sample_boxoffice <- select(boxoffice, c(15:30))
sample_boxoffice <- select(boxoffice, c(15:30))
sample_boxoffice <- select(boxoffice, c(15:30))
sample_boxoffice <- select(boxoffice, c(15:30))
min_max_scale <- function(x)
{
return((x- min(x)) /(max(x)-min(x)))
}
# To get a vector, use apply instead of lapply
boxoffice_scaled <- as.data.frame(apply(boxoffice, min_max_scale))
# To get a vector, use apply instead of lapply
boxoffice_scaled <- as.data.frame(apply(x=boxoffice, MARGIN=2, FUN=min_max_scale))
# To get a vector, use apply instead of lapply
boxoffice_scaled <- as.data.frame(apply(X=boxoffice, MARGIN=2, FUN=min_max_scale))
boxoffice_scaled
# To get a vector, use apply instead of lapply
boxoffice_scaled <- as.data.frame(apply(X=boxoffice, MARGIN=2, FUN=min_max_scale))
boxoffice <- boxoffice_scaled
boxoffice
a1 <- boxoffice["Avengers_Endgame"]
a2 <- boxoffice["Avatar"]
plot(dtw(a1,a2, keep=TRUE, window.type="sakoechiba", window.size=5), xaxp  = c(0,10,10), yaxp = c(0,10,10), type="twoway", col=c('blue', 'magenta'))
ts.plot(boxoffice["Avatar"])
ts.plot(boxoffice["Avengers_Endgame"])
dtw_dist <- function(x){dist(x, method="DTW", window.type="sakoechiba", window.size=5)}
sample_boxoffice %>%
as.matrix() %>%
gplots::heatmap.2 (
# dendrogram control
distfun = dtw_dist,
hclustfun = hclust,
dendrogram = "column",
Rowv = FALSE,
labRow = FALSE
)
# To get a vector, use apply instead of lapply
boxoffice_scaled <- as.data.frame(apply(X=boxoffice, MARGIN=2, FUN=min_max_scale))
boxoffice <- boxoffice_scaled
boxoffice
ts.plot(boxoffice["Avengers_Endgame"])
sample_boxoffice <- select(boxoffice, c(15:30))
a1 <- boxoffice["Avengers_Endgame"]
a2 <- boxoffice["Avatar"]
plot(dtw(a1,a2, keep=TRUE, window.type="sakoechiba", window.size=5), xaxp  = c(0,10,10), yaxp = c(0,10,10), type="twoway", col=c('blue', 'magenta'))
dtw_dist <- function(x){dist(x, method="DTW", window.type="sakoechiba", window.size=5)}
sample_boxoffice %>%
as.matrix() %>%
gplots::heatmap.2 (
# dendrogram control
distfun = dtw_dist,
hclustfun = hclust,
dendrogram = "column",
Rowv = FALSE,
labRow = FALSE
)
# cluster analysis
dist_ts <- TSclust::diss(SERIES = t(sample_boxoffice), METHOD = "DTWARP", window.type="sakoechiba", window.size=5) # note the dataframe must be transposed
hc <- stats::hclust(dist_ts, method="complete") # method can be also "average" or diana (for DIvisive ANAlysis Clustering)
# k for cluster which is 2 in our case (classic vs. wall)
hclus <- stats::cutree(hc, k = 2) %>% # hclus <- cluster::pam(dist_ts, k = 2)$clustering has a similar result
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
hcdata <- ggdendro::dendro_data(hc)
names_order <- hcdata$labels$label
# Use the folloing to remove labels from dendogram so not doubling up - but good for checking hcdata$labels$label <- ""
p1 <- hcdata %>%
ggdendro::ggdendrogram(., rotate=TRUE, leaf_labels=FALSE)
p2 <- sample_boxoffice %>%
dplyr::mutate(index = 1:31) %>%
tidyr::gather(key = type_col,value = value, -index) %>%
dplyr::full_join(., hclus, by = "type_col") %>%
mutate(type_col = factor(type_col, levels = rev(as.character(names_order)))) %>%
ggplot(aes(x = index, y = value, colour = cluster_group)) +
geom_line() +
facet_wrap(~type_col, ncol = 1, strip.position="left") +
guides(color=FALSE) +
theme_bw() +
theme(strip.background = element_blank(), strip.text = element_blank())
gp1<-ggplotGrob(p1)
gp2<-ggplotGrob(p2)
grid.arrange(gp2, gp1, ncol=2, widths=c(1,1))
# cluster analysis
dist_ts <- TSclust::diss(SERIES = t(sample_boxoffice), METHOD = "DTWARP", window.type="sakoechiba", window.size=5) # note the dataframe must be transposed
hc <- stats::hclust(dist_ts, method="complete") # method can be also "average" or diana (for DIvisive ANAlysis Clustering)
# k for cluster which is 2 in our case (classic vs. wall)
hclus <- stats::cutree(hc, k = 3) %>% # hclus <- cluster::pam(dist_ts, k = 2)$clustering has a similar result
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
hcdata <- ggdendro::dendro_data(hc)
names_order <- hcdata$labels$label
# Use the folloing to remove labels from dendogram so not doubling up - but good for checking hcdata$labels$label <- ""
p1 <- hcdata %>%
ggdendro::ggdendrogram(., rotate=TRUE, leaf_labels=FALSE)
p2 <- sample_boxoffice %>%
dplyr::mutate(index = 1:31) %>%
tidyr::gather(key = type_col,value = value, -index) %>%
dplyr::full_join(., hclus, by = "type_col") %>%
mutate(type_col = factor(type_col, levels = rev(as.character(names_order)))) %>%
ggplot(aes(x = index, y = value, colour = cluster_group)) +
geom_line() +
facet_wrap(~type_col, ncol = 1, strip.position="left") +
guides(color=FALSE) +
theme_bw() +
theme(strip.background = element_blank(), strip.text = element_blank())
gp1<-ggplotGrob(p1)
gp2<-ggplotGrob(p2)
grid.arrange(gp2, gp1, ncol=2, widths=c(1,1))
kmedoids <- cluster::pam(dist_ts, k = 3)[[3]] %>%
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
kmedoids
